syntax = "proto3";

package fidias;

import "github.com/hexablock/hexatype/structs.proto";
import "github.com/hexablock/hexalog/rpc.proto";
//import "github.com/hexablock/phi/rpc.proto";
//import "google/api/annotations.proto";

service FidiasRPC {
    // Returns local node info
    rpc LocalNodeRPC(Request) returns (hexatype.Node) {}
    // Get key-value pair from a single remote
    rpc GetKeyRPC(KVPair) returns (KVPair) {}

    // List directory contents from a single remote
    rpc ListDirRPC(KVPair) returns (stream KVPair) {}

    // Set key on cluster
    rpc SetRPC(WriteRequest) returns (WriteResponse) {}
    // Set key on cluster
    rpc CASetRPC(WriteRequest) returns (WriteResponse) {}
    // Remove key on cluster
    rpc RemoveRPC(WriteRequest) returns (WriteResponse) {}
    // Remove key on cluster
    rpc CARemoveRPC(WriteRequest) returns (WriteResponse) {}
}

message KVPair {
    bytes Key = 1;

    // Arbitrary data
    bytes Value = 2;

    // Artibrary integer flags
    int64 Flags = 3;

    // Lamport time
    uint64 LTime = 4;

    // Modification time
    uint64 ModTime = 5;

    // Entry id resulting in the view.  If a directory is created then the dir
    // entry will also for  the same modification id as such directories will
    // have different values based on their view
    bytes Modification = 6;

    // Entry height creating this view
    uint32 Height = 7;
}

message ReadStats {
	// Node serving the read
	repeated hexatype.Node Nodes = 1;
	// Affinity group
	int32 Group = 2;
	// Node priority in the group
	int32 Priority = 3;
	// Response time
	int64 RespTime = 4;
}

message WriteStats {
	int64 BallotTime = 1;
	int64 ApplyTime = 2;
	repeated hexalog.Participant Participants = 3;
}

message WriteOptions {
	bool WaitBallot = 1;
	bool WaitApply = 2;
	int64 WaitApplyTimeout = 3;
	int32 Retries = 4;
	int64 RetryInterval = 5;
}

message WriteRequest {
    KVPair KV = 1;
    WriteOptions Options = 2;
}

// Generic request
message Request {

}
// message ReadResponse {
//     KVPair KV = 1;
//     ReadStats Stats = 2;
// }

message WriteResponse {
    KVPair KV = 1;
    WriteStats Stats = 3;
}
