// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package fidias is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	KVPair
*/
package fidias

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KVPair struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Arbitrary data
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Artibrary integer flags
	Flags int64 `protobuf:"varint,3,opt,name=Flags" json:"Flags,omitempty"`
	// Lamport time
	LTime uint64 `protobuf:"varint,4,opt,name=LTime" json:"LTime,omitempty"`
	// Modification time
	ModTime uint64 `protobuf:"varint,5,opt,name=ModTime" json:"ModTime,omitempty"`
	// Entry id resulting in the view.  If a directory is created then the dir
	// entry will also for  the same modification id as such directories will
	// have different values based on their view
	Modification []byte `protobuf:"bytes,6,opt,name=Modification,proto3" json:"Modification,omitempty"`
	// Entry height creating this view
	Height uint32 `protobuf:"varint,7,opt,name=Height" json:"Height,omitempty"`
}

func (m *KVPair) Reset()                    { *m = KVPair{} }
func (m *KVPair) String() string            { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()               {}
func (*KVPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KVPair) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *KVPair) GetLTime() uint64 {
	if m != nil {
		return m.LTime
	}
	return 0
}

func (m *KVPair) GetModTime() uint64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *KVPair) GetModification() []byte {
	if m != nil {
		return m.Modification
	}
	return nil
}

func (m *KVPair) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*KVPair)(nil), "fidias.KVPair")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FidiasRPC service

type FidiasRPCClient interface {
	// Get key-value pair from remote
	GetKeyRPC(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*KVPair, error)
	// List directory contens for this node
	ListDirRPC(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (FidiasRPC_ListDirRPCClient, error)
}

type fidiasRPCClient struct {
	cc *grpc.ClientConn
}

func NewFidiasRPCClient(cc *grpc.ClientConn) FidiasRPCClient {
	return &fidiasRPCClient{cc}
}

func (c *fidiasRPCClient) GetKeyRPC(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*KVPair, error) {
	out := new(KVPair)
	err := grpc.Invoke(ctx, "/fidias.FidiasRPC/GetKeyRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fidiasRPCClient) ListDirRPC(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (FidiasRPC_ListDirRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FidiasRPC_serviceDesc.Streams[0], c.cc, "/fidias.FidiasRPC/ListDirRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &fidiasRPCListDirRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FidiasRPC_ListDirRPCClient interface {
	Recv() (*KVPair, error)
	grpc.ClientStream
}

type fidiasRPCListDirRPCClient struct {
	grpc.ClientStream
}

func (x *fidiasRPCListDirRPCClient) Recv() (*KVPair, error) {
	m := new(KVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FidiasRPC service

type FidiasRPCServer interface {
	// Get key-value pair from remote
	GetKeyRPC(context.Context, *KVPair) (*KVPair, error)
	// List directory contens for this node
	ListDirRPC(*KVPair, FidiasRPC_ListDirRPCServer) error
}

func RegisterFidiasRPCServer(s *grpc.Server, srv FidiasRPCServer) {
	s.RegisterService(&_FidiasRPC_serviceDesc, srv)
}

func _FidiasRPC_GetKeyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FidiasRPCServer).GetKeyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fidias.FidiasRPC/GetKeyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FidiasRPCServer).GetKeyRPC(ctx, req.(*KVPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FidiasRPC_ListDirRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KVPair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FidiasRPCServer).ListDirRPC(m, &fidiasRPCListDirRPCServer{stream})
}

type FidiasRPC_ListDirRPCServer interface {
	Send(*KVPair) error
	grpc.ServerStream
}

type fidiasRPCListDirRPCServer struct {
	grpc.ServerStream
}

func (x *fidiasRPCListDirRPCServer) Send(m *KVPair) error {
	return x.ServerStream.SendMsg(m)
}

var _FidiasRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fidias.FidiasRPC",
	HandlerType: (*FidiasRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyRPC",
			Handler:    _FidiasRPC_GetKeyRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDirRPC",
			Handler:       _FidiasRPC_ListDirRPC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd0, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc0, 0x71, 0x63, 0xb7, 0x8c, 0x3e, 0xa6, 0xc8, 0x43, 0x24, 0x78, 0x0a, 0x3d, 0xe5, 0x62,
	0x19, 0xfa, 0x11, 0x94, 0x29, 0x74, 0x83, 0x11, 0x64, 0xf7, 0xb8, 0x66, 0xf5, 0x41, 0x35, 0x25,
	0x8d, 0x87, 0x7e, 0x2d, 0x3f, 0xa1, 0x24, 0xd1, 0x83, 0x9e, 0xbc, 0xe5, 0xf7, 0x27, 0x90, 0xbc,
	0x07, 0xa5, 0x1f, 0x0e, 0xf5, 0xe0, 0x5d, 0x70, 0xc8, 0x8f, 0xd4, 0x92, 0x19, 0xab, 0x4f, 0x06,
	0xbc, 0xd9, 0xef, 0x0c, 0x79, 0xbc, 0x80, 0xa2, 0xb1, 0x93, 0x60, 0x92, 0xa9, 0xa5, 0x8e, 0x47,
	0xbc, 0x84, 0xf9, 0xde, 0xf4, 0x1f, 0x56, 0x9c, 0xa6, 0x96, 0x11, 0xeb, 0xba, 0x37, 0xdd, 0x28,
	0x0a, 0xc9, 0x54, 0xa1, 0x33, 0x62, 0xdd, 0x3c, 0xd3, 0x9b, 0x15, 0x33, 0xc9, 0xd4, 0x4c, 0x67,
	0xa0, 0x80, 0xc5, 0xd6, 0xb5, 0xa9, 0xcf, 0x53, 0xff, 0x21, 0x56, 0xb0, 0xdc, 0xba, 0x96, 0x8e,
	0x74, 0x30, 0x81, 0xdc, 0xbb, 0xe0, 0xe9, 0x89, 0x5f, 0x0d, 0xaf, 0x80, 0x3f, 0x59, 0xea, 0x5e,
	0x83, 0x58, 0x48, 0xa6, 0xce, 0xf4, 0xb7, 0x6e, 0x7b, 0x28, 0xd7, 0xe9, 0xfb, 0x7a, 0x77, 0x8f,
	0x37, 0x50, 0x3e, 0xda, 0xd0, 0xd8, 0x29, 0xe2, 0xbc, 0xce, 0x73, 0xd5, 0x79, 0xa6, 0xeb, 0x3f,
	0xae, 0x4e, 0x70, 0x05, 0xb0, 0xa1, 0x31, 0x3c, 0x90, 0xff, 0xd7, 0xfd, 0x15, 0x7b, 0xe1, 0x69,
	0x63, 0x77, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x5b, 0xd9, 0x1c, 0x3e, 0x01, 0x00, 0x00,
}
