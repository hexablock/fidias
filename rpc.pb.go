// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package fidias is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	KeyLocation
	KeyValuePair
*/
package fidias

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hexalog "github.com/hexablock/hexalog"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyLocation struct {
	// Actual key
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Location id or last entry or id
	Marker []byte `protobuf:"bytes,2,opt,name=Marker,proto3" json:"Marker,omitempty"`
	// Total known height of the key
	Height uint32 `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
}

func (m *KeyLocation) Reset()                    { *m = KeyLocation{} }
func (m *KeyLocation) String() string            { return proto.CompactTextString(m) }
func (*KeyLocation) ProtoMessage()               {}
func (*KeyLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyLocation) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyLocation) GetMarker() []byte {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *KeyLocation) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type KeyValuePair struct {
	Key   []byte         `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value []byte         `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Entry *hexalog.Entry `protobuf:"bytes,3,opt,name=Entry" json:"Entry,omitempty"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeyValuePair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValuePair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValuePair) GetEntry() *hexalog.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyLocation)(nil), "fidias.KeyLocation")
	proto.RegisterType((*KeyValuePair)(nil), "fidias.KeyValuePair")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FidiasRPC service

type FidiasRPCClient interface {
	// Get key-value pair from remote
	GetKeyRPC(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error)
	// Send key-location id pairs
	RelocateRPC(ctx context.Context, opts ...grpc.CallOption) (FidiasRPC_RelocateRPCClient, error)
	// Send block id and journal value
	RelocateBlocksRPC(ctx context.Context, opts ...grpc.CallOption) (FidiasRPC_RelocateBlocksRPCClient, error)
}

type fidiasRPCClient struct {
	cc *grpc.ClientConn
}

func NewFidiasRPCClient(cc *grpc.ClientConn) FidiasRPCClient {
	return &fidiasRPCClient{cc}
}

func (c *fidiasRPCClient) GetKeyRPC(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error) {
	out := new(KeyValuePair)
	err := grpc.Invoke(ctx, "/fidias.FidiasRPC/GetKeyRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fidiasRPCClient) RelocateRPC(ctx context.Context, opts ...grpc.CallOption) (FidiasRPC_RelocateRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FidiasRPC_serviceDesc.Streams[0], c.cc, "/fidias.FidiasRPC/RelocateRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &fidiasRPCRelocateRPCClient{stream}
	return x, nil
}

type FidiasRPC_RelocateRPCClient interface {
	Send(*KeyLocation) error
	Recv() (*KeyLocation, error)
	grpc.ClientStream
}

type fidiasRPCRelocateRPCClient struct {
	grpc.ClientStream
}

func (x *fidiasRPCRelocateRPCClient) Send(m *KeyLocation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fidiasRPCRelocateRPCClient) Recv() (*KeyLocation, error) {
	m := new(KeyLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fidiasRPCClient) RelocateBlocksRPC(ctx context.Context, opts ...grpc.CallOption) (FidiasRPC_RelocateBlocksRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FidiasRPC_serviceDesc.Streams[1], c.cc, "/fidias.FidiasRPC/RelocateBlocksRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &fidiasRPCRelocateBlocksRPCClient{stream}
	return x, nil
}

type FidiasRPC_RelocateBlocksRPCClient interface {
	Send(*KeyLocation) error
	Recv() (*KeyLocation, error)
	grpc.ClientStream
}

type fidiasRPCRelocateBlocksRPCClient struct {
	grpc.ClientStream
}

func (x *fidiasRPCRelocateBlocksRPCClient) Send(m *KeyLocation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fidiasRPCRelocateBlocksRPCClient) Recv() (*KeyLocation, error) {
	m := new(KeyLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FidiasRPC service

type FidiasRPCServer interface {
	// Get key-value pair from remote
	GetKeyRPC(context.Context, *KeyValuePair) (*KeyValuePair, error)
	// Send key-location id pairs
	RelocateRPC(FidiasRPC_RelocateRPCServer) error
	// Send block id and journal value
	RelocateBlocksRPC(FidiasRPC_RelocateBlocksRPCServer) error
}

func RegisterFidiasRPCServer(s *grpc.Server, srv FidiasRPCServer) {
	s.RegisterService(&_FidiasRPC_serviceDesc, srv)
}

func _FidiasRPC_GetKeyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FidiasRPCServer).GetKeyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fidias.FidiasRPC/GetKeyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FidiasRPCServer).GetKeyRPC(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FidiasRPC_RelocateRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FidiasRPCServer).RelocateRPC(&fidiasRPCRelocateRPCServer{stream})
}

type FidiasRPC_RelocateRPCServer interface {
	Send(*KeyLocation) error
	Recv() (*KeyLocation, error)
	grpc.ServerStream
}

type fidiasRPCRelocateRPCServer struct {
	grpc.ServerStream
}

func (x *fidiasRPCRelocateRPCServer) Send(m *KeyLocation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fidiasRPCRelocateRPCServer) Recv() (*KeyLocation, error) {
	m := new(KeyLocation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FidiasRPC_RelocateBlocksRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FidiasRPCServer).RelocateBlocksRPC(&fidiasRPCRelocateBlocksRPCServer{stream})
}

type FidiasRPC_RelocateBlocksRPCServer interface {
	Send(*KeyLocation) error
	Recv() (*KeyLocation, error)
	grpc.ServerStream
}

type fidiasRPCRelocateBlocksRPCServer struct {
	grpc.ServerStream
}

func (x *fidiasRPCRelocateBlocksRPCServer) Send(m *KeyLocation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fidiasRPCRelocateBlocksRPCServer) Recv() (*KeyLocation, error) {
	m := new(KeyLocation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FidiasRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fidias.FidiasRPC",
	HandlerType: (*FidiasRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyRPC",
			Handler:    _FidiasRPC_GetKeyRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelocateRPC",
			Handler:       _FidiasRPC_RelocateRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RelocateBlocksRPC",
			Handler:       _FidiasRPC_RelocateBlocksRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcb, 0x4c, 0xc9, 0x4c, 0x2c, 0x96, 0x52, 0x4b,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x48, 0xad, 0x48, 0x4c, 0xca,
	0xc9, 0x4f, 0xce, 0x06, 0xb3, 0x72, 0xf2, 0xd3, 0xf5, 0xe1, 0xea, 0x95, 0xfc, 0xb9, 0xb8, 0xbd,
	0x53, 0x2b, 0x7d, 0xf2, 0x93, 0x13, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x04, 0xb8, 0x98, 0xbd, 0x53,
	0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x40, 0x4c, 0x21, 0x31, 0x2e, 0x36, 0xdf, 0xc4,
	0xa2, 0xec, 0xd4, 0x22, 0x09, 0x26, 0xb0, 0x20, 0x94, 0x07, 0x12, 0xf7, 0x48, 0xcd, 0x4c, 0xcf,
	0x28, 0x91, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0xf2, 0x94, 0x62, 0xb8, 0x78, 0xbc, 0x53,
	0x2b, 0xc3, 0x12, 0x73, 0x4a, 0x53, 0x03, 0x12, 0x33, 0x8b, 0xb0, 0x98, 0x28, 0xc2, 0xc5, 0x0a,
	0x96, 0x86, 0x1a, 0x08, 0xe1, 0x08, 0xa9, 0x70, 0xb1, 0xba, 0xe6, 0x95, 0x14, 0x55, 0x82, 0x8d,
	0xe3, 0x36, 0xe2, 0xd3, 0x83, 0xba, 0x55, 0x0f, 0x2c, 0x1a, 0x04, 0x91, 0x34, 0x3a, 0xc5, 0xc8,
	0xc5, 0xe9, 0x06, 0xf6, 0x61, 0x50, 0x80, 0xb3, 0x90, 0x25, 0x17, 0xa7, 0x7b, 0x6a, 0x89, 0x77,
	0x6a, 0x25, 0x88, 0x23, 0xa2, 0x07, 0xf1, 0xba, 0x1e, 0xb2, 0xf5, 0x52, 0x58, 0x45, 0x95, 0x18,
	0x84, 0x6c, 0xb9, 0xb8, 0x83, 0x52, 0x73, 0x40, 0xde, 0x4e, 0x05, 0x69, 0x16, 0x46, 0x52, 0x06,
	0x0b, 0x0c, 0x29, 0x6c, 0x82, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x42, 0xce, 0x5c, 0x82, 0x30,
	0xed, 0x4e, 0xa0, 0x90, 0x2d, 0x26, 0xc3, 0x90, 0x24, 0x36, 0x70, 0x14, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x72, 0xc5, 0xf2, 0xbf, 0x01, 0x00, 0x00,
}
